package com.example.tracker.location

import com.google.firebase.firestore.ServerTimestamp
import java.util.Date

/**
 * The data class for a snapshot of location. All explanations are from
 * https://developer.android.com/reference/android/location/Location
 *
 */
data class LocationSnapshot(
    // The ID of this location snapshot
    val id: String? = null,

    // The record time (upload time) of the location snapshot, in ISO string format or Unix Epoch
    // time format.
    val recordTimeISOString: String? = null,
    val recordTimeUnixEpoch: Long,

    // The snapshot time (time of location snapshot taken) of the location snapshot, in ISO string
    // format or Unix Epoch time format.
    val snapshotTimeISOString: String? = null,
    val snapshotTimeUnixEpoch: Long,

    // An additional server timestamp generated by the server, does not contain milliseconds
    // whereas recordTimeUnixEpoch does.
    @ServerTimestamp
    val updateTime: Date? = null,

    // The name of the provider associated with this location.
//    val provider: String? = null,

    // Latitude and Longitude
    val latitude: Double? = null,
    val longitude: Double? = null,
    // Accuracy: the estimated horizontal accuracy radius in meters of this location at the 68th
    // percentile confidence level.
    // This means that there is a 68% chance that the true location of the device is within a
    // distance of this uncertainty of the reported location.
    // Another way of putting this is that if a circle with a radius equal to this accuracy is
    // drawn around the reported location, there is a 68% chance that the true location falls
    // within this circle.
    // This accuracy value is only valid for horizontal positioning, and not vertical positioning.
    //
    // This is only valid if hasAccuracy() is true. All locations generated by the LocationManager
    // include horizontal accuracy.
    val accuracy: Float? = null,
    val hasAccuracy: Boolean = false,

    // Speed: the speed at the time of this location in meters per second.
    // Note that the speed returned here may be more accurate than would be obtained simply
    // by calculating distance / time for sequential positions, such as if the Doppler
    // measurements from GNSS satellites are taken into account.
    // This is only valid if hasSpeed() is true.
    val speed: Float? = null,
    val hasSpeed: Boolean = false,
    // Speed accuracy: the estimated speed accuracy in meters per second of this location at the
    // 68th percentile confidence level.
    // This means that there is 68% chance that the true speed at the time of this location falls
    // within getSpeed() ()} +/- this uncertainty.
    // This is only valid if hasSpeedAccuracy() is true.
    val speedAccuracyMetersPerSecond: Float? = null,
    val hasSpeedAccuracy: Boolean = false,


    // Bearing: the bearing at the time of this location in degrees.
    // Bearing is the horizontal direction of travel of this device and is unrelated
    // to the device orientation. The bearing is guaranteed to be in the range [0, 360).
    //
    // This is only valid if hasBearing() is true.
//    val bearing: Float? = null,
//    val hasBearing: Boolean = false,
    // Bearing accuracy: the estimated bearing accuracy in degrees of this location at the
    // 68th percentile confidence level.
    // This means that there is 68% chance that the true bearing at the time of this location
    // falls within getBearing() ()} +/- this uncertainty.
    //
    // This is only valid if hasBearingAccuracy() ()} is true.
//    val bearingAccuracyDegrees: Float? = null,
//    val hasBearingAccuracy: Boolean = false,


    // The altitude of this location in meters above the WGS84 reference ellipsoid.
    // This is only valid if hasAltitude() is true.
    val hasAltitude: Boolean = false,
    val altitude: Double? = null,
    // The estimated altitude accuracy in meters of this location at the 68th percentile confidence
    // level. This means that there is 68% chance that the true altitude of this location falls
    // within getAltitude() ()} +/- this uncertainty.
    // This is only valid if hasVerticalAccuracy() is true.
    val hasVerticalAccuracy: Boolean = false,
    val verticalAccuracyMeters: Float? = null,

    // MSL Altitude: the Mean Sea Level altitude of this location in meters.
    // This is only valid if hasMslAltitude() is true.
//    val mslAltitudeMeters: Double? = null,
//    val hasMslAltitude: Boolean = false,
    // MSL Altitude Accuracy Meters: the estimated Mean Sea Level altitude accuracy in meters of
    // this location at the 68th percentile confidence level.
    // This means that there is 68% chance that the true Mean Sea Level altitude of this location
    // falls within getMslAltitudeMeters() +/- this uncertainty.    //
    // This is only valid if hasMslAltitudeAccuracy() is true.
//    val mslAltitudeAccuracyMeters: Float? = null,
//    val hasMslAltitudeAccuracy: Boolean = false,
)